#!/bin/bash
set -e

echo "==> üöÄ D√âMARRAGE DU D√âPLOIEMENT STUDUP"
echo "=========================================="

# Variables
APP_DIR="/var/www/studup-backend"
STORAGE_BACKUP="/tmp/studup-storage-backup"
ENV_BACKUP="/tmp/studup-env-backup"

# √âtape 0: SAUVEGARDE DES DONN√âES IMPORTANTES
echo "üíæ SAUVEGARDE DES DONN√âES CRITIQUES"
if [ -d "$APP_DIR/storage/app/public" ]; then
    echo "üìÅ Sauvegarde des uploads..."
    cp -r "$APP_DIR/storage/app/public" "$STORAGE_BACKUP" 2>/dev/null || true
    echo "‚úÖ Uploads sauvegard√©s"
fi

if [ -f "$APP_DIR/.env" ]; then
    echo "üìÑ Sauvegarde du fichier .env..."
    cp "$APP_DIR/.env" "$ENV_BACKUP"
    echo "‚úÖ .env sauvegard√©"
fi

# √âtape 1: Aller dans le dossier de l'application
cd "$APP_DIR"
echo "üìÅ Dossier: $(pwd)"

# √âtape 2: Configuration des permissions temporaires
echo "üîß Configuration des permissions temporaires..."
sudo chown -R ubuntu:ubuntu "$APP_DIR"
sudo chmod -R 755 "$APP_DIR"

# √âtape 3: NETTOYAGE RADICAL ET S√âCURIS√â
echo "üßπ NETTOYAGE RADICAL DES CACHES"
# Supprimer TOUS les fichiers de cache corrompus
rm -rf bootstrap/cache/*
rm -rf storage/framework/cache/data/*
rm -rf storage/framework/views/*
rm -rf storage/framework/sessions/*
rm -rf storage/logs/laravel.log
echo "‚úÖ Tous les caches supprim√©s"

# √âtape 4: RESTAURATION DES DONN√âES CRITIQUES
echo "üîÑ RESTAURATION DES DONN√âES"
# Restaurer le .env en priorit√©
if [ -f "$ENV_BACKUP" ]; then
    cp "$ENV_BACKUP" .env
    echo "‚úÖ .env restaur√©"
elif [ ! -f .env ] && [ -f .env.example ]; then
    echo "üìÑ Cr√©ation du fichier .env depuis .env.example..."
    cp .env.example .env
    # G√©n√©rer une cl√© APP_KEY imm√©diatement
    KEY=$(php -r "echo 'base64:'.base64_encode(random_bytes(32));")
    sed -i "s|APP_KEY=|APP_KEY=$KEY|" .env
    echo "‚úÖ .env cr√©√© avec nouvelle cl√©"
else
    echo "‚ùå ERREUR: Impossible de configurer .env"
    exit 1
fi

# V√©rifier que APP_KEY existe dans .env
if ! grep -q "APP_KEY=base64:" .env; then
    echo "üîë Correction de la cl√© API..."
    KEY=$(php -r "echo 'base64:'.base64_encode(random_bytes(32));")
    sed -i "s|APP_KEY=.*|APP_KEY=$KEY|" .env
    echo "‚úÖ Cl√© API r√©g√©n√©r√©e"
fi

# Configuration URL si manquante
if ! grep -q "APP_URL=" .env; then
    echo "APP_URL=https://vps-d91fd27c.vps.ovh.net" >> .env
    echo "‚úÖ APP_URL ajout√©"
fi

# √âtape 5: Cr√©ation de la structure COMPL√àTE
echo "üìÅ CR√âATION STRUCTURE LARAVEL"
mkdir -p storage/app/public
mkdir -p storage/framework/sessions
mkdir -p storage/framework/views  
mkdir -p storage/framework/cache/data
mkdir -p storage/logs
mkdir -p bootstrap/cache
echo "‚úÖ Structure des dossiers cr√©√©e"

# √âtape 6: Installation Composer SANS SCRIPTS
echo "üì¶ INSTALLATION D√âPENDANCES COMPOSER"
composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev --no-scripts
echo "‚úÖ D√©pendances Composer install√©es (sans scripts)"

# √âtape 7: PERMISSIONS APACHE AVANT LARAVEL
echo "üîê CONFIGURATION PERMISSIONS APACHE"
sudo chown -R www-data:www-data "$APP_DIR"
sudo chmod -R 755 "$APP_DIR"
sudo chmod -R 775 storage bootstrap/cache
sudo chmod -R 777 storage/framework/cache storage/logs storage/app/public

# Cr√©er les fichiers requis avec bonnes permissions
sudo -u www-data touch storage/logs/laravel.log
sudo chmod 666 storage/logs/laravel.log
echo "‚úÖ Permissions Apache configur√©es"

# √âtape 8: R√âINITIALISATION LARAVEL √âTAPE PAR √âTAPE
echo "‚öôÔ∏è  R√âINITIALISATION LARAVEL"

# Test de base de Laravel AVANT toute commande artisan
echo "üîç Test de base Laravel..."
if ! php artisan --version >/dev/null 2>&1; then
    echo "‚ùå ERREUR: Laravel ne d√©marre pas correctement"
    echo "üîß V√©rification du fichier .env..."
    cat .env | head -10
    exit 1
fi
echo "‚úÖ Laravel d√©marre correctement"

# Maintenant on peut vider les caches proprement
echo "üßπ Vidage des caches Laravel..."
php artisan config:clear >/dev/null 2>&1 || true
php artisan cache:clear >/dev/null 2>&1 || true
php artisan route:clear >/dev/null 2>&1 || true
php artisan view:clear >/dev/null 2>&1 || true
echo "‚úÖ Caches vid√©s"

# Ex√©cuter les scripts Composer maintenant que Laravel fonctionne
echo "üì¶ Finalisation Composer..."
composer run-script post-autoload-dump --no-interaction
echo "‚úÖ Scripts Composer ex√©cut√©s"

# √âtape 9: OPTIMISATIONS PRODUCTION SEULEMENT SI TOUT FONCTIONNE
echo "‚ö° OPTIMISATIONS PRODUCTION"

# Tester si la base de donn√©es est accessible avant les optimisations
echo "üóÑÔ∏è  Test de connexion base de donn√©es..."
if php artisan migrate:status >/dev/null 2>&1; then
    echo "‚úÖ Base de donn√©es accessible"
    
    # Faire les migrations si n√©cessaire
    php artisan migrate --force
    echo "‚úÖ Migrations ex√©cut√©es"
    
    # G√©n√©rer les caches optimis√©s
    php artisan config:cache
    php artisan route:cache
    php artisan view:cache
    echo "‚úÖ Caches optimis√©s g√©n√©r√©s"
    
else
    echo "‚ö†Ô∏è  Base de donn√©es non accessible - optimisations limit√©es"
    echo "L'application fonctionnera mais sans base de donn√©es"
fi

# √âtape 10: RESTAURATION DES UPLOADS
echo "üìÅ RESTAURATION DES UPLOADS"
if [ -d "$STORAGE_BACKUP" ]; then
    echo "üìÅ Restauration des fichiers upload√©s..."
    cp -r "$STORAGE_BACKUP"/* storage/app/public/ 2>/dev/null || true
    sudo chown -R www-data:www-data storage/app/public
    echo "‚úÖ Uploads restaur√©s"
fi

# √âtape 11: LIEN DE STOCKAGE
echo "üîó CONFIGURATION LIEN STOCKAGE"
if [ -L "public/storage" ]; then
    rm public/storage
fi
sudo -u www-data ln -sf ../storage/app/public public/storage
echo "‚úÖ Lien de stockage cr√©√©"

# √âtape 12: NETTOYAGE FINAL
echo "üßπ NETTOYAGE FINAL"
rm -rf "$STORAGE_BACKUP" "$ENV_BACKUP" 2>/dev/null || true
echo "‚úÖ Fichiers temporaires supprim√©s"

# √âtape 13: V√âRIFICATIONS COMPL√àTES
echo "‚úÖ V√âRIFICATIONS FINALES"

declare -i ERROR_COUNT=0

# V√©rifications critiques
if [ -f public/index.php ]; then
    echo "‚úÖ public/index.php pr√©sent"
else
    echo "‚ùå public/index.php manquant"
    ERROR_COUNT+=1
fi

if [ -f vendor/autoload.php ]; then
    echo "‚úÖ vendor/autoload.php pr√©sent"  
else
    echo "‚ùå vendor/autoload.php manquant"
    ERROR_COUNT+=1
fi

if [ -f .env ]; then
    echo "‚úÖ Fichier .env pr√©sent"
else
    echo "‚ùå Fichier .env manquant"
    ERROR_COUNT+=1
fi

# Test Laravel critique
if php artisan --version >/dev/null 2>&1; then
    echo "‚úÖ Laravel fonctionnel"
else
    echo "‚ùå Laravel non fonctionnel"
    ERROR_COUNT+=1
fi

# Test permissions
if [ -w storage/logs ]; then
    echo "‚úÖ Permissions storage OK"
else
    echo "‚ùå Permissions storage NOK"
    ERROR_COUNT+=1
fi

# Test lien stockage
if [ -L public/storage ]; then
    echo "‚úÖ Lien stockage OK"
else
    echo "‚ö†Ô∏è  Lien stockage manquant"
fi

# R√©sultat final
if [ $ERROR_COUNT -eq 0 ]; then
    echo "=========================================="
    echo "üéâ D√âPLOIEMENT R√âUSSI SANS ERREUR !"
    echo "üåê Application disponible sur:"
    echo "   https://vps-d91fd27c.vps.ovh.net"
    echo "=========================================="
    exit 0
else
    echo "=========================================="
    echo "‚ùå D√âPLOIEMENT √âCHOU√â - $ERROR_COUNT ERREUR(S)"
    echo "V√©rifiez les messages ci-dessus"
    echo "=========================================="
    exit 1
fi