#!/bin/bash
set -e

echo "==> üöÄ D√âMARRAGE DU D√âPLOIEMENT STUDUP"
echo "=========================================="

# Variables
APP_DIR="/var/www/studup-backend"
STORAGE_BACKUP="/tmp/studup-storage-backup"
ENV_BACKUP="/tmp/studup-env-backup"

# √âtape 0: SAUVEGARDE DES DONN√âES IMPORTANTES
echo "üíæ SAUVEGARDE DES DONN√âES CRITIQUES"
if [ -d "$APP_DIR/storage" ]; then
    echo "üìÅ Sauvegarde du dossier storage..."
    cp -r "$APP_DIR/storage" "$STORAGE_BACKUP"
    echo "‚úÖ Storage sauvegard√©"
fi

if [ -f "$APP_DIR/.env" ]; then
    echo "üìÑ Sauvegarde du fichier .env..."
    cp "$APP_DIR/.env" "$ENV_BACKUP"
    echo "‚úÖ .env sauvegard√©"
fi

# √âtape 1: Aller dans le dossier de l'application
cd "$APP_DIR"
echo "üìÅ Dossier: $(pwd)"

# √âtape 2: Donner les permissions temporaires pour l'installation
echo "üîß Configuration des permissions temporaires..."
sudo chown -R ubuntu:ubuntu "$APP_DIR"
sudo chmod -R 755 "$APP_DIR"

# √âtape 3: NETTOYAGE INTELLIGENT DES CACHES
echo "üßπ NETTOYAGE INTELLIGENT DES CACHES"
# Nettoyer seulement les caches, pas les uploads
find bootstrap/cache -name "*.php" -type f -delete 2>/dev/null || true
find storage/framework/cache -name "*.php" -type f -delete 2>/dev/null || true
find storage/framework/views -name "*.php" -type f -delete 2>/dev/null || true
find storage/framework/sessions -name "*" -type f -not -name ".gitignore" -delete 2>/dev/null || true
echo "‚úÖ Caches corrompus supprim√©s (uploads pr√©serv√©s)"

# √âtape 4: RESTAURATION DES DONN√âES CRITIQUES
echo "üîÑ RESTAURATION DES DONN√âES"
if [ -f "$ENV_BACKUP" ]; then
    cp "$ENV_BACKUP" .env
    echo "‚úÖ .env restaur√©"
elif [ ! -f .env ]; then
    echo "üìÑ Cr√©ation du fichier .env..."
    cp .env.example .env
    echo "‚úÖ .env cr√©√© √† partir de .env.example"
    echo "‚ö†Ô∏è  IMPORTANT: Configurez les variables dans .env !"
fi

# Restaurer les uploads si ils existaient
if [ -d "$STORAGE_BACKUP/app/public" ]; then
    echo "üìÅ Restauration des uploads..."
    mkdir -p storage/app
    cp -r "$STORAGE_BACKUP/app/public" storage/app/
    echo "‚úÖ Uploads restaur√©s"
fi

# Restaurer les logs importants
if [ -d "$STORAGE_BACKUP/logs" ] && [ "$(ls -A $STORAGE_BACKUP/logs 2>/dev/null)" ]; then
    echo "üìã Restauration des logs r√©cents..."
    mkdir -p storage/logs
    # Garder seulement les 5 derniers fichiers de log
    find "$STORAGE_BACKUP/logs" -name "*.log" -type f -exec ls -t {} + | head -5 | xargs -I {} cp {} storage/logs/
    echo "‚úÖ Logs r√©cents restaur√©s"
fi

# √âtape 5: Cr√©ation de la structure des dossiers
echo "üìÅ CR√âATION DES DOSSIERS LARAVEL"
mkdir -p storage/app/public
mkdir -p storage/framework/sessions
mkdir -p storage/framework/views
mkdir -p storage/framework/cache/data
mkdir -p storage/logs
mkdir -p bootstrap/cache
mkdir -p vendor
echo "‚úÖ Structure des dossiers cr√©√©e"

# √âtape 6: Installation des d√©pendances Composer
echo "üì¶ INSTALLATION DES D√âPENDANCES COMPOSER"
composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
echo "‚úÖ D√©pendances Composer install√©es"

# √âtape 7: Configuration des permissions POUR APACHE
echo "üîê CONFIGURATION DES PERMISSIONS APACHE"
sudo chown -R www-data:www-data "$APP_DIR"
sudo chmod -R 755 "$APP_DIR"
sudo chmod -R 775 storage bootstrap/cache
sudo chmod -R 777 storage/framework/cache storage/logs storage/app/public

# Cr√©er les fichiers de cache vides avec les bonnes permissions
sudo -u www-data touch storage/logs/laravel.log
sudo -u www-data touch bootstrap/cache/config.php
sudo -u www-data touch bootstrap/cache/packages.php
sudo -u www-data touch bootstrap/cache/services.php

sudo chmod 666 storage/logs/laravel.log
sudo chmod 666 bootstrap/cache/config.php
sudo chmod 666 bootstrap/cache/packages.php
sudo chmod 666 bootstrap/cache/services.php

echo "‚úÖ Permissions Apache configur√©es"

# √âtape 8: Configuration de l'application Laravel
echo "‚öôÔ∏è  CONFIGURATION LARAVEL"

# G√©n√©ration de la cl√© API si n√©cessaire
if ! grep -q "APP_KEY=base64" .env; then
    echo "üîë G√©n√©ration de la cl√© API..."
    KEY=$(php -r "echo 'base64:'.base64_encode(random_bytes(32));")
    sed -i "s/APP_KEY=/APP_KEY=$KEY/" .env
    echo "‚úÖ Cl√© API g√©n√©r√©e"
else
    echo "‚úÖ Cl√© API d√©j√† configur√©e"
fi

# Configuration de l'URL si n√©cessaire
if ! grep -q "APP_URL=" .env; then
    echo "APP_URL=https://vps-d91fd27c.vps.ovh.net" >> .env
    echo "‚úÖ APP_URL configur√©"
fi

# √âtape 9: OPTIMISATIONS LARAVEL PRODUCTION
echo "‚ö° OPTIMISATIONS PRODUCTION LARAVEL"
composer dump-autoload --optimize

# Vider et recr√©er les caches proprement
php artisan config:clear 2>/dev/null || true
php artisan route:clear 2>/dev/null || true
php artisan view:clear 2>/dev/null || true

# G√©n√©rer les caches optimis√©s
php artisan config:cache 2>/dev/null || echo "‚ö†Ô∏è  Config cache non g√©n√©r√© (normal si DB non accessible)"
php artisan route:cache 2>/dev/null || echo "‚ö†Ô∏è  Route cache non g√©n√©r√©"
php artisan view:cache 2>/dev/null || echo "‚ö†Ô∏è  View cache non g√©n√©r√©"

echo "‚úÖ Optimisations appliqu√©es"

# √âtape 10: MIGRATIONS BASE DE DONN√âES S√âCURIS√âES
echo "üóÑÔ∏è  MIGRATIONS BASE DE DONN√âES"

# V√©rification de la connexion DB avant migration
if php artisan migrate:status >/dev/null 2>&1; then
    echo "‚úÖ Connexion √† la base de donn√©es r√©ussie"
    
    # Backup DB avant migration
    echo "üíæ Backup de la base de donn√©es..."
    php artisan backup:run --only-db 2>/dev/null || echo "‚ö†Ô∏è  Backup DB non disponible"
    
    # Ex√©cuter les migrations
    php artisan migrate --force
    echo "‚úÖ Migrations ex√©cut√©es"
else
    echo "‚ö†Ô∏è  Impossible de se connecter √† la base de donn√©es"
    echo "V√©rifiez votre configuration .env"
    echo "L'application fonctionnera mais sans acc√®s DB"
fi

# √âtape 11: LIEN DE STOCKAGE AVEC PERMISSIONS
echo "üîó LIEN DE STOCKAGE"

# Supprimer l'ancien lien s'il existe
if [ -L "public/storage" ]; then
    rm public/storage
fi

# Cr√©er le nouveau lien
sudo -u www-data ln -sf ../storage/app/public public/storage
echo "‚úÖ Lien de stockage cr√©√©"

# √âtape 12: NETTOYAGE DES FICHIERS TEMPORAIRES
echo "üßπ NETTOYAGE FINAL"
rm -rf "$STORAGE_BACKUP" "$ENV_BACKUP" 2>/dev/null || true
echo "‚úÖ Fichiers temporaires nettoy√©s"

# √âtape 13: V√âRIFICATIONS FINALES
echo "‚úÖ V√âRIFICATIONS FINALES"

# Tests de base
declare -i ERROR_COUNT=0

if [ -d public ] && [ -f public/index.php ]; then
    echo "‚úÖ public/index.php trouv√©"
else
    echo "‚ùå ERREUR: public/index.php introuvable !"
    ERROR_COUNT+=1
fi

if [ -d vendor ] && [ -f vendor/autoload.php ]; then
    echo "‚úÖ vendor/autoload.php trouv√©"
else
    echo "‚ùå ERREUR: vendor/autoload.php introuvable !"
    ERROR_COUNT+=1
fi

if [ -f .env ]; then
    echo "‚úÖ Fichier .env pr√©sent"
else
    echo "‚ùå ERREUR: Fichier .env manquant"
    ERROR_COUNT+=1
fi

if [ -L "public/storage" ]; then
    echo "‚úÖ Lien de stockage pr√©sent"
else
    echo "‚ö†Ô∏è  Lien de stockage manquant"
fi

# Test rapide PHP
if php -v >/dev/null 2>&1; then
    echo "‚úÖ PHP fonctionnel"
else
    echo "‚ùå ERREUR: PHP non fonctionnel"
    ERROR_COUNT+=1
fi

# V√©rifier les permissions critiques
if [ -w storage/logs ]; then
    echo "‚úÖ Permissions storage/logs OK"
else
    echo "‚ùå ERREUR: storage/logs non accessible en √©criture"
    ERROR_COUNT+=1
fi

# R√©sultat final
if [ $ERROR_COUNT -eq 0 ]; then
    echo "=========================================="
    echo "üéâ D√âPLOIEMENT R√âUSSI SANS ERREUR !"
    echo "üåê Votre application est disponible sur:"
    echo "   https://vps-d91fd27c.vps.ovh.net"
    echo "=========================================="
else
    echo "=========================================="
    echo "‚ö†Ô∏è  D√âPLOIEMENT TERMIN√â AVEC $ERROR_COUNT ERREUR(S)"
    echo "V√©rifiez les messages ci-dessus"
    echo "=========================================="
    exit 1
fi

echo ""
echo "üí° INFORMATION:"
echo "   L'application est maintenant optimis√©e pour la production"
echo "   Les caches Laravel acc√©l√©reront les performances"
echo ""