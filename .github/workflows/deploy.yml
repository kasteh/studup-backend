name: Déploiement Simple et Fiable

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Déploiement sur le serveur
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 15m
          script: |
            set -e
            echo "🚀 DÉBUT DU DÉPLOIEMENT ULTRA-SIMPLIFIÉ"
            echo "=========================================="
            
            # Étape 1: Aller dans /var/www
            cd /var/www
            echo "📁 Dossier: /var/www"
            
            # Étape 2: Sauvegarde rapide
            BACKUP_DIR="/tmp/studup-backup-$(date +%s)"
            if [ -d studup-backend ]; then
                echo "💾 Sauvegarde rapide..."
                mkdir -p "$BACKUP_DIR"
                cp -r studup-backend/storage/app/public "$BACKUP_DIR/" 2>/dev/null || true
                cp studup-backend/.env "$BACKUP_DIR/" 2>/dev/null || true
                echo "✅ Sauvegarde effectuée"
            fi
            
            # Étape 3: Nettoyage complet
            echo "🧹 Nettoyage complet..."
            sudo rm -rf studup-backend
            echo "✅ Ancien dossier supprimé"
            
            # Étape 4: Nouveau clonage
            echo "📦 Clonage du nouveau code..."
            git clone https://github.com/kasteh/studup-backend.git
            cd studup-backend
            echo "✅ Code cloné"
            
            # Étape 5: Configuration basique
            echo "🔧 Configuration basique..."
            
            # Restaurer .env ou créer depuis exemple
            if [ -f "$BACKUP_DIR/.env" ]; then
                cp "$BACKUP_DIR/.env" .env
                echo "✅ .env restauré depuis sauvegarde"
            elif [ ! -f .env ] && [ -f .env.example ]; then
                cp .env.example .env
                echo "✅ .env créé depuis .env.example"
            fi
            
            # Vérifier et générer APP_KEY si nécessaire
            if ! grep -q "APP_KEY=base64:" .env; then
                echo "🔑 Génération de la clé APP_KEY..."
                NEW_KEY=$(php -r "echo 'base64:'.base64_encode(random_bytes(32));")
                sed -i "s/APP_KEY=.*/APP_KEY=$NEW_KEY/" .env
                echo "✅ Clé APP_KEY générée"
            fi
            
            # Étape 6: Installation Composer SANS scripts
            echo "📦 Installation Composer (sans scripts)..."
            composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev --no-scripts
            echo "✅ Dépendances installées"
            
            # Étape 7: Structure des dossiers
            echo "📁 Création des dossiers..."
            mkdir -p storage/app/public
            mkdir -p storage/framework/sessions
            mkdir -p storage/framework/views
            mkdir -p storage/framework/cache/data
            mkdir -p storage/logs
            mkdir -p bootstrap/cache
            echo "✅ Dossiers créés"
            
            # Étape 8: Permissions Apache
            echo "🔐 Configuration des permissions..."
            sudo chown -R www-data:www-data /var/www/studup-backend
            sudo chmod -R 755 /var/www/studup-backend
            sudo chmod -R 775 storage bootstrap/cache
            sudo chmod -R 777 storage/framework/cache storage/logs
            
            # Créer les fichiers essentiels
            sudo -u www-data touch storage/logs/laravel.log
            sudo -u www-data touch bootstrap/cache/config.php
            sudo chmod 666 storage/logs/laravel.log bootstrap/cache/config.php
            echo "✅ Permissions configurées"
            
            # Étape 9: Restauration des uploads
            echo "📁 Restauration des fichiers uploadés..."
            if [ -d "$BACKUP_DIR/public" ]; then
                cp -r "$BACKUP_DIR/public"/* storage/app/public/ 2>/dev/null || true
                echo "✅ Fichiers uploadés restaurés"
            fi
            
            # Étape 10: Lien de stockage
            echo "🔗 Création du lien de stockage..."
            if [ -L "public/storage" ]; then
                rm public/storage
            fi
            ln -sf ../storage/app/public public/storage
            echo "✅ Lien de stockage créé"
            
            # Étape 11: Test Laravel basique
            echo "🔍 Test de fonctionnement Laravel..."
            if php -r "require 'vendor/autoload.php'; echo '✅ Autoloader fonctionnel';"; then
                echo "✅ Laravel peut charger l'autoloader"
            else
                echo "❌ ERREUR: Problème avec l'autoloader"
                echo "📋 Tentative de réparation..."
                composer dump-autoload
            fi
            
            # Étape 12: Nettoyage
            echo "🧹 Nettoyage final..."
            rm -rf "$BACKUP_DIR"
            
            # Étape 13: Redémarrage Apache
            echo "🔄 Redémarrage d'Apache..."
            sudo systemctl restart apache2
            
            # Étape 14: Test final
            echo "📋 Test final de l'application..."
            sleep 3
            if curl -s -f http://localhost >/dev/null 2>&1; then
                echo "🎉 DÉPLOIEMENT RÉUSSI !"
                echo "🌐 Application accessible sur: https://vps-d91fd27c.vps.ovh.net"
            else
                echo "⚠️  L'application ne répond pas immédiatement"
                echo "💡 Elle peut mettre quelques minutes à se initialiser"
                echo "📋 Vérifiez avec: sudo tail -f /var/log/apache2/error.log"
            fi
            
            echo "=========================================="