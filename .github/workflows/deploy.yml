name: D√©ploiement Automatique Studup

on:
  push:
    branches:
      - main
  workflow_dispatch: # Permet d√©clenchement manuel

env:
  APP_URL: https://vps-d91fd27c.vps.ovh.net

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Run tests
        run: vendor/bin/phpunit

  deploy:
    needs: tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: V√©rification des secrets
        run: |
          if [ -z "${{ secrets.SSH_HOST }}" ] || [ -z "${{ secrets.SSH_USER }}" ] || [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "‚ùå Secrets SSH manquants"
            exit 1
          fi

      - name: D√©ploiement sur le serveur
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 10m
          script: |
            set -e  # Arr√™t imm√©diat en cas d'erreur
            
            echo "üöÄ D√âBUT DU D√âPLOIEMENT - $(date)"
            echo "=========================================="
            
            # Variables
            APP_DIR="/var/www/studup-backend"
            BACKUP_DIR="/var/backups/studup-$(date +%Y%m%d_%H%M%S)"
            
            # Backup de l'ancienne version
            if [ -d "$APP_DIR" ]; then
                echo "üíæ Backup de l'ancienne version..."
                sudo mkdir -p /var/backups
                sudo cp -r "$APP_DIR" "$BACKUP_DIR"
                echo "‚úÖ Backup cr√©√©: $BACKUP_DIR"
            fi
            
            # Pr√©paration du d√©ploiement
            cd /var/www
            
            if [ -d studup-backend ]; then
                echo "üîÑ Mise √† jour du code existant..."
                cd studup-backend
                git fetch origin main
                git reset --hard origin/main
            else
                echo "üì¶ Premier clonage..."
                git clone https://github.com/kasteh/studup-backend.git
                cd studup-backend
            fi
            
            # V√©rifier que deploy.sh existe
            if [ ! -f deploy.sh ]; then
                echo "‚ùå deploy.sh introuvable, arr√™t du d√©ploiement"
                exit 1
            fi
            
            # Ex√©cution du script de d√©ploiement
            chmod +x deploy.sh
            echo "‚ñ∂Ô∏è  Ex√©cution du script de d√©ploiement..."
            
            if ! ./deploy.sh; then
                echo "‚ùå √âchec du script de d√©ploiement"
                if [ -d "$BACKUP_DIR" ]; then
                    echo "üîÑ Restauration du backup..."
                    sudo rm -rf "$APP_DIR"
                    sudo cp -r "$BACKUP_DIR" "$APP_DIR"
                    sudo systemctl restart apache2
                    echo "‚úÖ Rollback effectu√©"
                fi
                exit 1
            fi
            
            # Red√©marrage des services
            echo "üîÑ Red√©marrage des services..."
            sudo systemctl restart apache2
            sudo systemctl restart php8.2-fpm 2>/dev/null || true
            
            # V√©rifications de sant√©
            echo "üìã V√©rifications de sant√©..."
            sleep 10
            
            # Test HTTP local
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost)
            
            if [ "$HTTP_STATUS" = "200" ]; then
                echo "üéâ SUCC√àS: Application fonctionnelle (HTTP $HTTP_STATUS)"
                
                # Test HTTPS externe
                if curl -s -f "${{ env.APP_URL }}" >/dev/null 2>&1; then
                    echo "üåê HTTPS externe fonctionnel"
                else
                    echo "‚ö†Ô∏è  HTTPS externe inaccessible"
                fi
                
                # Nettoyage des anciens backups (garder 5 derniers)
                sudo find /var/backups -name "studup-*" -type d | sort -r | tail -n +6 | sudo xargs rm -rf
                
            else
                echo "‚ùå √âCHEC: HTTP $HTTP_STATUS"
                echo "üìã Logs Apache r√©cents:"
                sudo tail -n 20 /var/log/apache2/error.log
                
                # Rollback automatique
                if [ -d "$BACKUP_DIR" ]; then
                    echo "üîÑ Rollback automatique..."
                    sudo rm -rf "$APP_DIR"
                    sudo cp -r "$BACKUP_DIR" "$APP_DIR"
                    sudo systemctl restart apache2
                    echo "‚úÖ Rollback effectu√©"
                fi
                exit 1
            fi
            
            echo "=========================================="
            echo "‚úÖ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS - $(date)"
            echo "üåê URL: ${{ env.APP_URL }}"

      - name: Notification de succ√®s
        if: success()
        run: |
          echo "üéâ D√©ploiement r√©ussi sur ${{ env.APP_URL }}"
          # Ajouter ici vos notifications Slack/Discord si n√©cessaire

      - name: Notification d'√©chec
        if: failure()
        run: |
          echo "‚ùå √âchec du d√©ploiement - v√©rifiez les logs"
          # Ajouter ici vos notifications d'erreur